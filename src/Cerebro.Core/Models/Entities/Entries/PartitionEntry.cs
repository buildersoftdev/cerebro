using Cerebro.Core.Models.Common.Addresses;
using Cerebro.Core.Models.Entities.Base;

namespace Cerebro.Core.Models.Entities.Entries
{
    public class PartitionEntry : BaseEntity
    {
        public int Id { get; set; }

        public string NodeOwner { get; set; }

        public int AddressId { get; set; }
        public int PartitionId { get; set; }
        public string AddressAlias { get; set; }

        public MessageIndexTypes MessageIndexType { get; set; }

        // here is the main entry, entries can be indexed asynchronously
        public long CurrentEntry { get; set; }
        public long MarkDeleteEntryPosition { get; set; }

        // index key will be generated by the AddressIndex
        public Dictionary<string, IndexPosition> Positions { get; set; }

        public PartitionEntry()
        {
            Positions = new Dictionary<string, IndexPosition>();
        }
    }

    public class IndexPosition
    {
        public long StartEntryPosition { get; set; }
        public long? EndEntryPosition { get; set; }
    }
}
