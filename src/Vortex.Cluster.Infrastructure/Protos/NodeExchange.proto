/// VORTEX NodeExchange PROTO file
/// This Proto File is part of VORTEX SERVER


syntax = "proto3";
import "google/protobuf/timestamp.proto";

package NodeExchange;

service NodeExchangeService {

	rpc RegisterNode(NodeInfo) returns (NodeRegistrationResponse);
	rpc SendHeartbeat(Heartbeat) returns (HeartbeatResponse);

	
	/// Address methods
	rpc RequestAddressCreation(AddressCreationRequest) returns (AddressCreationResponse);
	rpc RequestAddressPartitionChange(AddressPartitionChangeRequest) returns (AddressResponse);

	rpc RequestAddressStorageSettingsChange(AddressStorageSettingsChangeRequest) returns (AddressResponse);
	rpc RequestAddressReplicationSettingsChange(AddressReplicationSettingsChangeRequest) returns (AddressResponse);
	rpc RequestAddressRetentionSettingsChange(AddressRetentionSettingsChangeRequest) returns (AddressResponse);
	rpc RequestAddressSchemaSettingsChange(AddressSchemaSettingsChangeRequest) returns (AddressResponse);

	rpc RequestAddressDeletion(AddressDeletionRequest) returns (AddressResponse);
	///

	/// Application methods
	rpc RequestApplicationCreation(ApplicationCreationRequest) returns (ApplicationResponse);
	rpc RequestApplicationDeletion(ApplicationDeletionRequest) returns (ApplicationResponse);
	rpc RequestApplicationUpdate(ApplicationUpdateRequest) returns (ApplicationResponse);

	rpc RequestApplicationStatusChange(ApplicationActivationRequest) returns (ApplicationResponse);

	rpc RequestApplicationTokenCreation(AddApplicationTokenRequest) returns (ApplicationResponse);
	rpc RequestApplicationTokenRevocation(RevokeApplicationTokenRequest) returns (ApplicationResponse);
	rpc RequestApplicationPermissionChange(ChangeApplicationPermissionRequest) returns (ApplicationResponse);


	/// Client connection methods
	rpc RequestClientConnectionRegistration(ClientConnection_Registration) returns (ClientConnection_Response);
	rpc RequestClientConnectionHeartbeat(ClientConnection_Heartbeat) returns (ClientConnection_Response);
	rpc RequestClientConnectionDisconnect(ClientConnection_Close) returns (ClientConnection_Response);


	///	
	// SendData to Replica

	// SendData to Distributed Shard (Partition Leader)
	rpc DistributeData(DataDistributionMessage) returns (DataDistribution_Response);

	// Promote Address to Address in cluster
	// Promote Application to Application in cluster
}

message NodeInfo {
	string node_id = 1;
}

message NodeRegistrationResponse {
	bool success = 1;
	string message = 2;
}

message Heartbeat {
	string node_Id = 1;
}

message HeartbeatResponse {
	bool success = 1;
	string message = 2;
}

message AddressCreationRequest {
	int32 AddressClusterScopeRequestState = 1;
	string Address = 2;
	string CreatedBy = 3;
}

message AddressCreationResponse {
	bool success = 1;
}

message AddressPartitionChangeRequest {
	string Alias = 1;
	int32 PartitionNumber = 2;
	string UpdatedBy = 3;
}

message AddressStorageSettingsChangeRequest {
	string Alias = 1;
	string StorageSettingsJson = 2;
	string UpdatedBy = 3;
}

message AddressReplicationSettingsChangeRequest {
	string Alias = 1;
	string ReplicationSettingsJson = 2;
	string UpdatedBy = 3;
}

message AddressRetentionSettingsChangeRequest {
	string Alias = 1;
	string RetentionSettingsJson = 2;
	string UpdatedBy = 3;
}

message AddressSchemaSettingsChangeRequest {
	string Alias = 1;
	string SchemaSettingsJson = 2;
	string UpdatedBy = 3;
}

message AddressDeletionRequest{
		string Alias = 1;
}

message AddressResponse {
	bool success = 1;
	string message = 2;
}

message ApplicationCreationRequest {
	string Name = 1;
	string Description = 2;
	string SettingsJson = 3;
	string CreatedBy = 4;
}

message ApplicationDeletionRequest {
	bool IsHardDelete = 1;
	string applicationName = 2;
	string UpdatedBy = 3;
}

message ApplicationUpdateRequest {
	string Name = 1;
	string Description = 2;
	string SettingsJson = 3;
	string UpdatedBy = 4;
}

message ApplicationActivationRequest{
	string Name = 1;
	bool IsActive = 2;
	string UpdatedBy = 3;
}

message AddApplicationTokenRequest {
	string ApplicationName = 1;
	string ApplicationTokenEntityJson = 2;
	string CreatedBy = 3;
}

message RevokeApplicationTokenRequest {
	string ApplicationName = 1;
	string ApiKey = 2;
	string UpdatedBy = 3;
}

message ChangeApplicationPermissionRequest {
	string ApplicationName = 1;
	// PermissionType CAN READ, WRITE, CREATE
	string PermissionType = 2;
	string Value = 3;
	string UpdatedBy = 4;
}

message ApplicationResponse {
	bool success = 1;
	string message = 2;
}


message ClientConnection_Registration {
	string application = 1;
	string address = 2;
	string connection_type = 3;
	string client_host = 4;
	string connected_node = 5;

	// these are enums, we are sending as string; do the parsing in the server side.
	optional string production_instance_type = 6;
	optional string subscription_type = 7;
	optional string subscription_mode = 8;
	optional string read_initial_position = 9;

	optional string appKey = 10;
	optional string appToken = 11;
}

message ClientConnection_Heartbeat {
	string application = 1;
	string address = 2;
	string connection_type = 3;
	string client_host = 4;
	string connected_node = 5;
	string client_id = 6;

	optional string appKey = 7;
	optional string appToken = 8;
}

message ClientConnection_Close {
	string application = 1;
	string address = 2;
	string connection_type = 3;
	string client_host = 4;
	string connected_node = 5;
	string client_id = 6;

	optional string appKey = 7;
	optional string appToken = 8;
}

message ClientConnection_Response {
	bool success = 1;
	string message = 2;
}

message DataDistributionMessage {
	bytes message_id = 1;
	bytes message_payload = 2;
	map<string, string> message_headers = 3;

	optional int32 partition_index = 4;
	string source_application = 5;
	string host_application = 6;

	google.protobuf.Timestamp sent_date = 7;

	string addressAlias = 8;
}

message DataDistribution_Response {
	bool success = 1;
	string message = 2;
}